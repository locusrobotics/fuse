cmake_minimum_required(VERSION 2.8.3)
project(fuse_models)

if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 14)
endif()
add_compile_options(-Wall -Werror)

find_package(
  catkin REQUIRED
  COMPONENTS
    fuse_constraints
    fuse_core
    fuse_graphs
    fuse_publishers
    fuse_variables
    geometry_msgs
    message_generation
    nav_msgs
    pluginlib
    roscpp
    roslint
    sensor_msgs
    std_srvs
    tf2
    tf2_2d
    tf2_geometry_msgs
    tf2_ros)

find_package(Ceres REQUIRED)
find_package(Eigen3 REQUIRED)
find_package(Boost REQUIRED)

# Generate messages
add_service_files(
  DIRECTORY
    srv
  FILES
    SetPose.srv
    SetPoseDeprecated.srv
)

generate_messages(
  DEPENDENCIES
    geometry_msgs
    std_msgs
)

catkin_package(
  INCLUDE_DIRS
    include
  LIBRARIES
    ${PROJECT_NAME}
  CATKIN_DEPENDS
    fuse_constraints
    fuse_core
    fuse_graphs
    fuse_publishers
    fuse_variables
    geometry_msgs
    message_runtime
    nav_msgs
    pluginlib
    roscpp
    sensor_msgs
    std_srvs
    tf2
    tf2_2d
    tf2_geometry_msgs
    tf2_ros
  DEPENDS
    Boost
    CERES
    EIGEN3
)

set(ROSLINT_CPP_OPTS "--filter=-build/c++11,-runtime/references")
roslint_cpp()

###########
## Build ##
###########

include_directories(
  include
  ${Boost_INCLUDE_DIRS}
  ${catkin_INCLUDE_DIRS}
  ${CERES_INCLUDE_DIRS}
  ${EIGEN3_INCLUDE_DIRS}
)

## Declare a C++ library
add_library(
  ${PROJECT_NAME}
    src/acceleration_2d.cpp
    src/imu_2d.cpp
    src/odometry_2d.cpp
    src/odometry_2d_publisher.cpp
    src/pose_2d.cpp
    src/twist_2d.cpp
    src/unicycle_2d.cpp
    src/unicycle_2d_ignition.cpp
    src/unicycle_2d_state_kinematic_constraint.cpp
)

## Specify libraries to link a library or executable target against
target_link_libraries(
  ${PROJECT_NAME}
    ${catkin_LIBRARIES}
    ${CERES_LIBRARIES}
)
add_dependencies(
  ${PROJECT_NAME}
    ${${PROJECT_NAME}_EXPORTED_TARGETS}
    ${catkin_EXPORTED_TARGETS}
)

#############
## Install ##
#############

## Mark executables and/or libraries for installation
install(
  TARGETS
    ${PROJECT_NAME}
  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
)

## Mark cpp header files for installation
install(
  DIRECTORY
    include/${PROJECT_NAME}/
  DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
  FILES_MATCHING PATTERN "*.h"
)

install(
  FILES fuse_plugins.xml
  DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
)

#############
## Testing ##
#############

if(CATKIN_ENABLE_TESTING)
  find_package(rostest REQUIRED)

  # Lint tests
  roslint_add_test()

  # Model tests
  catkin_add_gtest(
    test_unicycle_2d
    test/test_unicycle_2d.cpp
  )
  if(TARGET test_unicycle_2d)
    target_link_libraries(
      test_unicycle_2d
      ${PROJECT_NAME}
      ${catkin_LIBRARIES}
      ${CERES_LIBRARIES}
    )
  endif()

  # Prediction tests
  catkin_add_gtest(
    test_unicycle_2d_predict
    test/test_unicycle_2d_predict.cpp
  )
  if(TARGET test_unicycle_2d_predict)
    target_link_libraries(
      test_unicycle_2d_predict
      ${PROJECT_NAME}
      ${catkin_LIBRARIES}
      ${CERES_LIBRARIES}
    )
  endif()

  # Ignition tests
  add_rostest_gtest(
    test_unicycle_2d_ignition
    test/unicycle_2d_ignition.test
    test/test_unicycle_2d_ignition.cpp
  )
  if(TARGET test_unicycle_2d_ignition)
    target_link_libraries(
      test_unicycle_2d_ignition
      ${PROJECT_NAME}
      ${catkin_LIBRARIES}
    )
  endif()

  # Other tests
  catkin_add_gtest(
    test_sensor_proc
    test/test_sensor_proc.cpp
  )
  if(TARGET test_sensor_proc)
    target_link_libraries(
      test_sensor_proc
      ${PROJECT_NAME}
      ${catkin_LIBRARIES}
    )
  endif()

endif()
