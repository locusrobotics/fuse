/*
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2020, Brett Downing
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of the copyright holder nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */


/*
 * This file provides a sane configuration for a clock to manage order of events.
 * This file exists to help with a migration from rclcpp::Time to rclcpp::time
 * Priority is given to C++ std::chrono
 * emphasis will be placed on interoperability with rclcpp::Time and rclcpp::time
 *
 * This will likely be extended to distinguish between:
 *    times of events being optimised
 *    events generated by the running of the optimiser (log throttling, callbacks etc)
 *
 */

#include <fuse_core/time.hpp>

#include "rcl/time.h"
#include <rclcpp/utilities.hpp>

namespace fuse_core
{
// UTILITIES =======================================================================================
bool is_valid(rclcpp::Time time)
{
  return time.nanoseconds() > 0;
}


bool is_valid(rclcpp::Clock::SharedPtr clock)
{
  // Checks for null pointer, missing get_now() implementation, and RCL_CLOCK_UNINITIALIZED
  if (!rcl_clock_valid(clock->get_clock_handle())) {
    return false;
  }

  switch (clock->get_clock_type()) {
    case RCL_ROS_TIME:
    case RCL_STEADY_TIME:
    case RCL_SYSTEM_TIME:
      return is_valid(clock->now());

    // By right we shouldn't even get to this block, but these cases are included for completeness
    case RCL_CLOCK_UNINITIALIZED:
    default:
      return false;
  }
}


bool wait_for_valid(
  rclcpp::Clock::SharedPtr clock,
  rclcpp::Context::SharedPtr context)
{
  if (!context || !context->is_valid()) {
    throw std::runtime_error("context cannot be slept with because it's invalid");
  }

  if (!rcl_clock_valid(clock->get_clock_handle())) {
    throw std::runtime_error("clock cannot be waited on as it is not rcl_clock_valid");
  }

  if (is_valid(clock)) {
    return true;
  } else {
    // Wait until the first valid time
    return clock->sleep_until(rclcpp::Time(0, 1, clock->get_clock_type()), context);
  }
}


bool wait_for_valid(
  rclcpp::Clock::SharedPtr clock,
  const rclcpp::Duration & timeout,
  rclcpp::Context::SharedPtr context,
  const rclcpp::Duration & wait_tick_ns)
{
  if (!context || !context->is_valid()) {
    throw std::runtime_error("context cannot be slept with because it's invalid");
  }

  if (!rcl_clock_valid(clock->get_clock_handle())) {
    throw std::runtime_error("clock cannot be waited on as it is not rcl_clock_valid");
  }

  rclcpp::Clock timeout_clock = rclcpp::Clock(RCL_STEADY_TIME);
  rclcpp::Time start = timeout_clock.now();

  while (!is_valid(clock) && context->is_valid()) {  // Context check checks for rclcpp::shutdown()
    if (timeout < wait_tick_ns) {
      timeout_clock.sleep_for(timeout);
    } else {
      timeout_clock.sleep_for(rclcpp::Duration(wait_tick_ns));
    }

    if (timeout_clock.now() - start > timeout) {
      return is_valid(clock);
    }
  }

  return is_valid(clock);
}

}
