/*
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2020, Brett Downing
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of the copyright holder nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */



/*
 * This file provides a sane configuration for a clock to manage order of events.
 * This file exists to help with a migration from ros::time to rclcpp::time
 * Priority is given to C++ std::chrono
 * emphasis will be placed on interoperability with ros::time and rclcpp::time
 * 
 * This will likely be extended to distinguish between:
 *    times of events being optimised
 *    events generated by the running of the optimiser (log throttling, callbacks etc)
 * 
 */

#include <fuse_core/time.h>

namespace fuse_core
{

TimeStamp::TimeStamp():
    valid(false)
{}

TimeStamp::TimeStamp(std::chrono::time_point<std::chrono::system_clock, std::chrono::nanoseconds> stamp):
    valid(true),
    timestamp(stamp)
{}

TimeStamp::TimeStamp(const rclcpp::Time& stamp):
    valid(true),
    timestamp(
        std::chrono::duration_cast<Duration>(
            std::chrono::nanoseconds(
                stamp.nanoseconds()
            )
        )
    )
{}

TimeStamp stamp_from_ros(const rclcpp::Time timestamp)
{
    return TimeStamp(timestamp);
}

rclcpp::Time stamp_to_ros(const TimeStamp timestamp)
{
    return rclcpp::Time(
        timestamp.time_since_epoch().count()
    );
}



}


std::ostream& operator<<(std::ostream& os, const fuse_core::TimeStamp& timestamp)
{
    os << timestamp.time_since_epoch().count();
    return os;
}