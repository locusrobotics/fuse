/*
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2020, Brett Downing
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of the copyright holder nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */



/*
 * This file provides a sane configuration for a clock to manage order of events.
 * This file exists to help with a migration from fuse_core::TimeStamp to rclcpp::time
 * Priority is given to C++ std::chrono
 * emphasis will be placed on interoperability with fuse_core::TimeStamp and rclcpp::time
 *
 * This will likely be extended to distinguish between:
 *    times of events being optimised
 *    events generated by the running of the optimiser (log throttling, callbacks etc)
 *
 */

#include <fuse_core/time.h>
#include <rclcpp/utilities.hpp>

using chrono_ns_time_point_t =
  std::chrono::time_point<std::chrono::system_clock, std::chrono::nanoseconds>;

namespace fuse_core
{
TimeStamp::TimeStamp() :
  rclcpp::Time(static_cast<int64_t>(0), RCL_CLOCK_UNINITIALIZED)
{}

TimeStamp::TimeStamp(const TimeStamp& rhs) = default;

TimeStamp::TimeStamp(int32_t seconds, uint32_t nanoseconds, rcl_clock_type_t clock_type) :
  rclcpp::Time(seconds, nanoseconds, clock_type)
{}

TimeStamp::TimeStamp(int64_t nanoseconds, rcl_clock_type_t clock_type) :
  rclcpp::Time(nanoseconds, clock_type)
{}

TimeStamp::TimeStamp(const rclcpp::Time& time) :
  rclcpp::Time(time)
{}

TimeStamp::TimeStamp(chrono_ns_time_point_t& stamp):
  rclcpp::Time(stamp.time_since_epoch().count(), RCL_SYSTEM_TIME)
{}

rclcpp::Time TimeStamp::to_ros() const
{
  return rclcpp::Time(this->nanoseconds(), this->get_clock_type());
}

chrono_ns_time_point_t TimeStamp::to_chrono() const
{
  if (this->get_clock_type() != RCL_SYSTEM_TIME) {
    throw std::runtime_error("Constructing system clock time_point from non-system clock");
  }
  return chrono_ns_time_point_t(
    std::chrono::nanoseconds(this->nanoseconds())
  );
}


// UTILITIES =======================================================================================
std::ostream& operator<<(std::ostream& os, const fuse_core::TimeStamp& timestamp)
{
    os << timestamp.nanoseconds();
    return os;
}


bool isValid(rclcpp::Clock::SharedPtr clock)
{
  switch (clock->get_clock_type()) {
    case RCL_CLOCK_UNINITIALIZED:
      return false;
    case RCL_SYSTEM_TIME:
      return true;
    case RCL_ROS_TIME:
      return clock->now().nanoseconds() == 0;
    default:
      return false;
  }
}


// Logic adapted from: http://docs.ros.org/en/noetic/api/rostime/html/src_2time_8cpp_source.html
bool waitForValid(rclcpp::Clock::SharedPtr clock, rclcpp::Duration timeout)
{
   rclcpp::Time start = clock->now();
   while (clock->now().nanoseconds() == 0 && rclcpp::ok()) {
     rclcpp::sleep_for(std::chrono::nanoseconds(timeout.nanoseconds()));

     if (timeout > rclcpp::Duration(0, 0) && (clock->now() - start > timeout)) {
       return false;
     }
   }

   if (!rclcpp::ok()) {
     return false;
   }
   return true;
}

}
