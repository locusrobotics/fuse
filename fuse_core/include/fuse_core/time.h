/*
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2020, Brett Downing
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of the copyright holder nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */



/*
 * This file provides a sane configuration for a clock to manage order of events.
 * This file exists to help with a migration from ros::time to rclcpp::time
 * Priority is given to C++ std::chrono
 * emphasis will be placed on interoperability with ros::time and rclcpp::time
 * 
 * This will likely be extended to distinguish between:
 *   times of events being optimised
 *   events generated by the running of the optimiser (log throttling, callbacks etc)
 * 
 * The clock class will likely be overridden to prevent use of now(),
 *   emphasising that the optimiser is not strictly realtime and the epoch is probably invalid
 * 
 */

#ifndef FUSE_CORE_TIME_H
#define FUSE_CORE_TIME_H

#include <chrono>
#include <iostream> 
#include <rclcpp/duration.hpp>
#include <rclcpp/time.hpp>

#include <stdexcept>


namespace fuse_core
{



// ros and rclcpp both use nanosecond resolution
typedef std::chrono::nanoseconds    Duration;
// rclcpp is configurable but defaults to system time
typedef std::chrono::system_clock   Clock;
// alias time
//typedef std::chrono::time_point<fuse_core::Clock, fuse_core::Duration> TimeStamp;


class TimeStamp{
  public:
    TimeStamp();
    TimeStamp(std::chrono::time_point<std::chrono::system_clock, std::chrono::nanoseconds> stamp);
    TimeStamp(const rclcpp::Time& stamp);


    bool initialised() const {
        return valid;
    }
    inline operator std::chrono::time_point<std::chrono::system_clock, std::chrono::nanoseconds>() const {
        return timestamp;
    }

    //inline operator int64_t() const {
    //    return timestamp.time_since_epoch().count();
    //}

    //operator rclcpp::Time() const {
    //    return rclcpp::Time(timestamp.time_since_epoch().count());
    //}

    inline std::chrono::nanoseconds time_since_epoch()const {return timestamp.time_since_epoch();}

    inline friend bool operator< (const TimeStamp& lhs, const TimeStamp& rhs){
        if((!lhs.valid) && (!rhs.valid)) throw std::logic_error("Comparing two uninitialised Timestamps");
        if(!lhs.valid) return true;
        if(!rhs.valid) return false;
        return lhs.timestamp < rhs.timestamp;
    }
    inline friend bool operator> (const TimeStamp& lhs, const TimeStamp& rhs) { return rhs < lhs; }
    inline friend bool operator<=(const TimeStamp& lhs, const TimeStamp& rhs) { return !(lhs > rhs); }
    inline friend bool operator>=(const TimeStamp& lhs, const TimeStamp& rhs) { return !(lhs < rhs); }

    inline friend bool operator== (const TimeStamp& lhs, const TimeStamp& rhs){
        if((!lhs.valid) && (!rhs.valid)) return true;   // XXX this permits time_zero syntax in publishers. please deprecate
        return lhs.valid && rhs.valid && (lhs.timestamp == rhs.timestamp);
    }

    inline friend TimeStamp operator+ (TimeStamp lhs, const Duration& rhs){
        return TimeStamp(lhs.timestamp + rhs);
    }
    inline friend TimeStamp operator- (TimeStamp lhs, const Duration& rhs){
        return TimeStamp(lhs.timestamp - rhs);
    }
    inline friend Duration operator- (TimeStamp lhs, const TimeStamp& rhs){
        return Duration(lhs.timestamp - rhs.timestamp);
    }


  private:
    bool valid;   // a hack to deal with comparisons to zero in fuse_publishers
    std::chrono::time_point<std::chrono::system_clock, std::chrono::nanoseconds> timestamp;

};


/**
 * @brief provide a conversion from timestamps provided by ROS
 * 
 * A convenience function providing a trivial type conversion to fuse_core::TimeStamp
 * 
 * @param[in] timestamp  The rclcpp::Time to convert to a fuse_core::TimeStamp
 */
TimeStamp stamp_from_ros(const rclcpp::Time rostime);

/**
 * @brief provide a conversion to ROS timestamps
 * 
 * A convenience function providing a trivial type conversion to rclcpp::Time
 * 
 * @param[in] timestamp  The fuse_core::TimeStamp to convert to a rclcpp::Time
 */
rclcpp::Time stamp_to_ros(const TimeStamp timestamp);


inline double toSec(Duration d){
    return std::chrono::duration<double>(d).count();
}


}


/**
 * @brief provide an overload for use with the ostream << operator
 * 
 * present a human readable fuse_core::TimeStamp
 * 
 * @param[in] timestamp  The rclcpp::Time to convert to print
 */
std::ostream& operator<<(std::ostream& os, const fuse_core::TimeStamp& timestamp);

#endif  // FUSE_CORE_TIME_H
